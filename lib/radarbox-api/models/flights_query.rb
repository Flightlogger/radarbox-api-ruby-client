=begin
#RadarBox On Demand API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.1.14

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module Radarbox
  class FlightsQuery
    attr_accessor :page_size

    attr_accessor :page

    attr_accessor :from_date

    attr_accessor :to_date

    attr_accessor :departure_from_date

    attr_accessor :departure_to_date

    attr_accessor :arrival_from_date

    attr_accessor :arrival_to_date

    attr_accessor :registrations

    attr_accessor :flight_ids

    attr_accessor :mode_s_hex_codes

    attr_accessor :airlines

    attr_accessor :to_airports

    attr_accessor :from_airports

    attr_accessor :include_flight_paths

    attr_accessor :sources

    attr_accessor :aircraft_classes

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'page_size' => :'pageSize',
        :'page' => :'page',
        :'from_date' => :'fromDate',
        :'to_date' => :'toDate',
        :'departure_from_date' => :'departureFromDate',
        :'departure_to_date' => :'departureToDate',
        :'arrival_from_date' => :'arrivalFromDate',
        :'arrival_to_date' => :'arrivalToDate',
        :'registrations' => :'registrations',
        :'flight_ids' => :'flightIds',
        :'mode_s_hex_codes' => :'modeSHexCodes',
        :'airlines' => :'airlines',
        :'to_airports' => :'toAirports',
        :'from_airports' => :'fromAirports',
        :'include_flight_paths' => :'includeFlightPaths',
        :'sources' => :'sources',
        :'aircraft_classes' => :'aircraftClasses'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'page_size' => :'Object',
        :'page' => :'Object',
        :'from_date' => :'Object',
        :'to_date' => :'Object',
        :'departure_from_date' => :'Object',
        :'departure_to_date' => :'Object',
        :'arrival_from_date' => :'Object',
        :'arrival_to_date' => :'Object',
        :'registrations' => :'Object',
        :'flight_ids' => :'Object',
        :'mode_s_hex_codes' => :'Object',
        :'airlines' => :'Object',
        :'to_airports' => :'Object',
        :'from_airports' => :'Object',
        :'include_flight_paths' => :'Object',
        :'sources' => :'Object',
        :'aircraft_classes' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Radarbox::FlightsQuery` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Radarbox::FlightsQuery`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'page_size')
        self.page_size = attributes[:'page_size']
      end

      if attributes.key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.key?(:'from_date')
        self.from_date = attributes[:'from_date']
      end

      if attributes.key?(:'to_date')
        self.to_date = attributes[:'to_date']
      end

      if attributes.key?(:'departure_from_date')
        self.departure_from_date = attributes[:'departure_from_date']
      end

      if attributes.key?(:'departure_to_date')
        self.departure_to_date = attributes[:'departure_to_date']
      end

      if attributes.key?(:'arrival_from_date')
        self.arrival_from_date = attributes[:'arrival_from_date']
      end

      if attributes.key?(:'arrival_to_date')
        self.arrival_to_date = attributes[:'arrival_to_date']
      end

      if attributes.key?(:'registrations')
        if (value = attributes[:'registrations']).is_a?(Array)
          self.registrations = value
        end
      end

      if attributes.key?(:'flight_ids')
        if (value = attributes[:'flight_ids']).is_a?(Array)
          self.flight_ids = value
        end
      end

      if attributes.key?(:'mode_s_hex_codes')
        if (value = attributes[:'mode_s_hex_codes']).is_a?(Array)
          self.mode_s_hex_codes = value
        end
      end

      if attributes.key?(:'airlines')
        if (value = attributes[:'airlines']).is_a?(Array)
          self.airlines = value
        end
      end

      if attributes.key?(:'to_airports')
        if (value = attributes[:'to_airports']).is_a?(Array)
          self.to_airports = value
        end
      end

      if attributes.key?(:'from_airports')
        if (value = attributes[:'from_airports']).is_a?(Array)
          self.from_airports = value
        end
      end

      if attributes.key?(:'include_flight_paths')
        self.include_flight_paths = attributes[:'include_flight_paths']
      end

      if attributes.key?(:'sources')
        if (value = attributes[:'sources']).is_a?(Array)
          self.sources = value
        end
      end

      if attributes.key?(:'aircraft_classes')
        if (value = attributes[:'aircraft_classes']).is_a?(Array)
          self.aircraft_classes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          page_size == o.page_size &&
          page == o.page &&
          from_date == o.from_date &&
          to_date == o.to_date &&
          departure_from_date == o.departure_from_date &&
          departure_to_date == o.departure_to_date &&
          arrival_from_date == o.arrival_from_date &&
          arrival_to_date == o.arrival_to_date &&
          registrations == o.registrations &&
          flight_ids == o.flight_ids &&
          mode_s_hex_codes == o.mode_s_hex_codes &&
          airlines == o.airlines &&
          to_airports == o.to_airports &&
          from_airports == o.from_airports &&
          include_flight_paths == o.include_flight_paths &&
          sources == o.sources &&
          aircraft_classes == o.aircraft_classes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [page_size, page, from_date, to_date, departure_from_date, departure_to_date, arrival_from_date, arrival_to_date, registrations, flight_ids, mode_s_hex_codes, airlines, to_airports, from_airports, include_flight_paths, sources, aircraft_classes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Radarbox.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
