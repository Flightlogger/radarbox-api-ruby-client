=begin
#RadarBox On Demand API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.31

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module Radarbox
  # NOTAMs are a way of local aviation authorities alerting pilots of potential hazards
  class ApiNotam
    attr_accessor :number

    attr_accessor :year

    attr_accessor :type

    attr_accessor :effective_start

    attr_accessor :effective_end

    attr_accessor :icao_location

    attr_accessor :issued

    attr_accessor :affected_fir

    attr_accessor :minimum_flight_level

    attr_accessor :maximum_flight_level

    attr_accessor :radius

    attr_accessor :location

    attr_accessor :text

    attr_accessor :translations

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'number' => :'number',
        :'year' => :'year',
        :'type' => :'type',
        :'effective_start' => :'effectiveStart',
        :'effective_end' => :'effectiveEnd',
        :'icao_location' => :'icaoLocation',
        :'issued' => :'issued',
        :'affected_fir' => :'affectedFir',
        :'minimum_flight_level' => :'minimumFlightLevel',
        :'maximum_flight_level' => :'maximumFlightLevel',
        :'radius' => :'radius',
        :'location' => :'location',
        :'text' => :'text',
        :'translations' => :'translations'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'number' => :'Object',
        :'year' => :'Object',
        :'type' => :'Object',
        :'effective_start' => :'Object',
        :'effective_end' => :'Object',
        :'icao_location' => :'Object',
        :'issued' => :'Object',
        :'affected_fir' => :'Object',
        :'minimum_flight_level' => :'Object',
        :'maximum_flight_level' => :'Object',
        :'radius' => :'Object',
        :'location' => :'Object',
        :'text' => :'Object',
        :'translations' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Radarbox::ApiNotam` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Radarbox::ApiNotam`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'year')
        self.year = attributes[:'year']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'effective_start')
        self.effective_start = attributes[:'effective_start']
      end

      if attributes.key?(:'effective_end')
        self.effective_end = attributes[:'effective_end']
      end

      if attributes.key?(:'icao_location')
        self.icao_location = attributes[:'icao_location']
      end

      if attributes.key?(:'issued')
        self.issued = attributes[:'issued']
      end

      if attributes.key?(:'affected_fir')
        self.affected_fir = attributes[:'affected_fir']
      end

      if attributes.key?(:'minimum_flight_level')
        self.minimum_flight_level = attributes[:'minimum_flight_level']
      end

      if attributes.key?(:'maximum_flight_level')
        self.maximum_flight_level = attributes[:'maximum_flight_level']
      end

      if attributes.key?(:'radius')
        self.radius = attributes[:'radius']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'translations')
        if (value = attributes[:'translations']).is_a?(Array)
          self.translations = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          number == o.number &&
          year == o.year &&
          type == o.type &&
          effective_start == o.effective_start &&
          effective_end == o.effective_end &&
          icao_location == o.icao_location &&
          issued == o.issued &&
          affected_fir == o.affected_fir &&
          minimum_flight_level == o.minimum_flight_level &&
          maximum_flight_level == o.maximum_flight_level &&
          radius == o.radius &&
          location == o.location &&
          text == o.text &&
          translations == o.translations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [number, year, type, effective_start, effective_end, icao_location, issued, affected_fir, minimum_flight_level, maximum_flight_level, radius, location, text, translations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Radarbox.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
