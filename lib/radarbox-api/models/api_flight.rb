=begin
#RadarBox On Demand API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.1.4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module Radarbox
  class ApiFlight
    attr_accessor :callsign

    attr_accessor :flight_number_iata

    attr_accessor :flight_number_icao

    attr_accessor :aircraft_registration

    attr_accessor :aircraft_mode_s

    attr_accessor :aircraft_type

    attr_accessor :aircraft_classes

    attr_accessor :aircraft_type_description

    attr_accessor :airline_iata

    attr_accessor :airline_icao

    attr_accessor :airline_name

    attr_accessor :dep_airport_icao

    attr_accessor :dep_airport_iata

    attr_accessor :dep_airport_name

    attr_accessor :dep_airport_city

    attr_accessor :dep_airport_state

    attr_accessor :dep_airport_country

    attr_accessor :dep_airport_latitude

    attr_accessor :dep_airport_longitude

    attr_accessor :dep_airport_tz

    attr_accessor :dep_airport_tz_diff_utc

    attr_accessor :scheduled_departure

    attr_accessor :estimated_departure

    attr_accessor :actual_departure

    attr_accessor :actual_takeoff

    attr_accessor :calculated_takeoff

    attr_accessor :div_airport_icao

    attr_accessor :div_airport_iata

    attr_accessor :div_airport_name

    attr_accessor :div_airport_city

    attr_accessor :div_airport_state

    attr_accessor :div_airport_country

    attr_accessor :div_airport_latitude

    attr_accessor :div_airport_longitude

    attr_accessor :div_airport_tz

    attr_accessor :div_airport_tz_diff_utc

    attr_accessor :arr_airport_icao

    attr_accessor :arr_airport_iata

    attr_accessor :arr_airport_name

    attr_accessor :arr_airport_city

    attr_accessor :arr_airport_state

    attr_accessor :arr_airport_country

    attr_accessor :arr_airport_latitude

    attr_accessor :arr_airport_longitude

    attr_accessor :arr_airport_tz

    attr_accessor :arr_airport_tz_diff_utc

    attr_accessor :scheduled_arrival

    attr_accessor :estimated_arrival

    attr_accessor :actual_arrival

    attr_accessor :actual_landing

    attr_accessor :calculated_landing

    attr_accessor :departure_status

    attr_accessor :departure_delay_reason

    attr_accessor :departure_delay_detail

    attr_accessor :departure_gate

    attr_accessor :departure_terminal

    attr_accessor :arrival_status

    attr_accessor :arrival_delay_reason

    attr_accessor :arrival_delay_detail

    attr_accessor :arrival_gate

    attr_accessor :arrival_terminal

    attr_accessor :arrival_baggage_claim

    attr_accessor :ground_speed

    attr_accessor :heading

    attr_accessor :altitude

    attr_accessor :vertical_rate

    attr_accessor :latitude

    attr_accessor :longitude

    attr_accessor :squawk_code

    attr_accessor :source

    attr_accessor :created

    attr_accessor :updated

    attr_accessor :positions

    attr_accessor :status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'callsign' => :'callsign',
        :'flight_number_iata' => :'flightNumberIata',
        :'flight_number_icao' => :'flightNumberIcao',
        :'aircraft_registration' => :'aircraftRegistration',
        :'aircraft_mode_s' => :'aircraftModeS',
        :'aircraft_type' => :'aircraftType',
        :'aircraft_classes' => :'aircraftClasses',
        :'aircraft_type_description' => :'aircraftTypeDescription',
        :'airline_iata' => :'airlineIata',
        :'airline_icao' => :'airlineIcao',
        :'airline_name' => :'airlineName',
        :'dep_airport_icao' => :'depAirportIcao',
        :'dep_airport_iata' => :'depAirportIata',
        :'dep_airport_name' => :'depAirportName',
        :'dep_airport_city' => :'depAirportCity',
        :'dep_airport_state' => :'depAirportState',
        :'dep_airport_country' => :'depAirportCountry',
        :'dep_airport_latitude' => :'depAirportLatitude',
        :'dep_airport_longitude' => :'depAirportLongitude',
        :'dep_airport_tz' => :'depAirportTz',
        :'dep_airport_tz_diff_utc' => :'depAirportTzDiffUTC',
        :'scheduled_departure' => :'scheduledDeparture',
        :'estimated_departure' => :'estimatedDeparture',
        :'actual_departure' => :'actualDeparture',
        :'actual_takeoff' => :'actualTakeoff',
        :'calculated_takeoff' => :'calculatedTakeoff',
        :'div_airport_icao' => :'divAirportIcao',
        :'div_airport_iata' => :'divAirportIata',
        :'div_airport_name' => :'divAirportName',
        :'div_airport_city' => :'divAirportCity',
        :'div_airport_state' => :'divAirportState',
        :'div_airport_country' => :'divAirportCountry',
        :'div_airport_latitude' => :'divAirportLatitude',
        :'div_airport_longitude' => :'divAirportLongitude',
        :'div_airport_tz' => :'divAirportTz',
        :'div_airport_tz_diff_utc' => :'divAirportTzDiffUTC',
        :'arr_airport_icao' => :'arrAirportIcao',
        :'arr_airport_iata' => :'arrAirportIata',
        :'arr_airport_name' => :'arrAirportName',
        :'arr_airport_city' => :'arrAirportCity',
        :'arr_airport_state' => :'arrAirportState',
        :'arr_airport_country' => :'arrAirportCountry',
        :'arr_airport_latitude' => :'arrAirportLatitude',
        :'arr_airport_longitude' => :'arrAirportLongitude',
        :'arr_airport_tz' => :'arrAirportTz',
        :'arr_airport_tz_diff_utc' => :'arrAirportTzDiffUTC',
        :'scheduled_arrival' => :'scheduledArrival',
        :'estimated_arrival' => :'estimatedArrival',
        :'actual_arrival' => :'actualArrival',
        :'actual_landing' => :'actualLanding',
        :'calculated_landing' => :'calculatedLanding',
        :'departure_status' => :'departureStatus',
        :'departure_delay_reason' => :'departureDelayReason',
        :'departure_delay_detail' => :'departureDelayDetail',
        :'departure_gate' => :'departureGate',
        :'departure_terminal' => :'departureTerminal',
        :'arrival_status' => :'arrivalStatus',
        :'arrival_delay_reason' => :'arrivalDelayReason',
        :'arrival_delay_detail' => :'arrivalDelayDetail',
        :'arrival_gate' => :'arrivalGate',
        :'arrival_terminal' => :'arrivalTerminal',
        :'arrival_baggage_claim' => :'arrivalBaggageClaim',
        :'ground_speed' => :'groundSpeed',
        :'heading' => :'heading',
        :'altitude' => :'altitude',
        :'vertical_rate' => :'verticalRate',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'squawk_code' => :'squawkCode',
        :'source' => :'source',
        :'created' => :'created',
        :'updated' => :'updated',
        :'positions' => :'positions',
        :'status' => :'status'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'callsign' => :'Object',
        :'flight_number_iata' => :'Object',
        :'flight_number_icao' => :'Object',
        :'aircraft_registration' => :'Object',
        :'aircraft_mode_s' => :'Object',
        :'aircraft_type' => :'Object',
        :'aircraft_classes' => :'Object',
        :'aircraft_type_description' => :'Object',
        :'airline_iata' => :'Object',
        :'airline_icao' => :'Object',
        :'airline_name' => :'Object',
        :'dep_airport_icao' => :'Object',
        :'dep_airport_iata' => :'Object',
        :'dep_airport_name' => :'Object',
        :'dep_airport_city' => :'Object',
        :'dep_airport_state' => :'Object',
        :'dep_airport_country' => :'Object',
        :'dep_airport_latitude' => :'Object',
        :'dep_airport_longitude' => :'Object',
        :'dep_airport_tz' => :'Object',
        :'dep_airport_tz_diff_utc' => :'Object',
        :'scheduled_departure' => :'Object',
        :'estimated_departure' => :'Object',
        :'actual_departure' => :'Object',
        :'actual_takeoff' => :'Object',
        :'calculated_takeoff' => :'Object',
        :'div_airport_icao' => :'Object',
        :'div_airport_iata' => :'Object',
        :'div_airport_name' => :'Object',
        :'div_airport_city' => :'Object',
        :'div_airport_state' => :'Object',
        :'div_airport_country' => :'Object',
        :'div_airport_latitude' => :'Object',
        :'div_airport_longitude' => :'Object',
        :'div_airport_tz' => :'Object',
        :'div_airport_tz_diff_utc' => :'Object',
        :'arr_airport_icao' => :'Object',
        :'arr_airport_iata' => :'Object',
        :'arr_airport_name' => :'Object',
        :'arr_airport_city' => :'Object',
        :'arr_airport_state' => :'Object',
        :'arr_airport_country' => :'Object',
        :'arr_airport_latitude' => :'Object',
        :'arr_airport_longitude' => :'Object',
        :'arr_airport_tz' => :'Object',
        :'arr_airport_tz_diff_utc' => :'Object',
        :'scheduled_arrival' => :'Object',
        :'estimated_arrival' => :'Object',
        :'actual_arrival' => :'Object',
        :'actual_landing' => :'Object',
        :'calculated_landing' => :'Object',
        :'departure_status' => :'Object',
        :'departure_delay_reason' => :'Object',
        :'departure_delay_detail' => :'Object',
        :'departure_gate' => :'Object',
        :'departure_terminal' => :'Object',
        :'arrival_status' => :'Object',
        :'arrival_delay_reason' => :'Object',
        :'arrival_delay_detail' => :'Object',
        :'arrival_gate' => :'Object',
        :'arrival_terminal' => :'Object',
        :'arrival_baggage_claim' => :'Object',
        :'ground_speed' => :'Object',
        :'heading' => :'Object',
        :'altitude' => :'Object',
        :'vertical_rate' => :'Object',
        :'latitude' => :'Object',
        :'longitude' => :'Object',
        :'squawk_code' => :'Object',
        :'source' => :'Object',
        :'created' => :'Object',
        :'updated' => :'Object',
        :'positions' => :'Object',
        :'status' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Radarbox::ApiFlight` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Radarbox::ApiFlight`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'callsign')
        self.callsign = attributes[:'callsign']
      end

      if attributes.key?(:'flight_number_iata')
        self.flight_number_iata = attributes[:'flight_number_iata']
      end

      if attributes.key?(:'flight_number_icao')
        self.flight_number_icao = attributes[:'flight_number_icao']
      end

      if attributes.key?(:'aircraft_registration')
        self.aircraft_registration = attributes[:'aircraft_registration']
      end

      if attributes.key?(:'aircraft_mode_s')
        self.aircraft_mode_s = attributes[:'aircraft_mode_s']
      end

      if attributes.key?(:'aircraft_type')
        self.aircraft_type = attributes[:'aircraft_type']
      end

      if attributes.key?(:'aircraft_classes')
        if (value = attributes[:'aircraft_classes']).is_a?(Array)
          self.aircraft_classes = value
        end
      end

      if attributes.key?(:'aircraft_type_description')
        self.aircraft_type_description = attributes[:'aircraft_type_description']
      end

      if attributes.key?(:'airline_iata')
        self.airline_iata = attributes[:'airline_iata']
      end

      if attributes.key?(:'airline_icao')
        self.airline_icao = attributes[:'airline_icao']
      end

      if attributes.key?(:'airline_name')
        self.airline_name = attributes[:'airline_name']
      end

      if attributes.key?(:'dep_airport_icao')
        self.dep_airport_icao = attributes[:'dep_airport_icao']
      end

      if attributes.key?(:'dep_airport_iata')
        self.dep_airport_iata = attributes[:'dep_airport_iata']
      end

      if attributes.key?(:'dep_airport_name')
        self.dep_airport_name = attributes[:'dep_airport_name']
      end

      if attributes.key?(:'dep_airport_city')
        self.dep_airport_city = attributes[:'dep_airport_city']
      end

      if attributes.key?(:'dep_airport_state')
        self.dep_airport_state = attributes[:'dep_airport_state']
      end

      if attributes.key?(:'dep_airport_country')
        self.dep_airport_country = attributes[:'dep_airport_country']
      end

      if attributes.key?(:'dep_airport_latitude')
        self.dep_airport_latitude = attributes[:'dep_airport_latitude']
      end

      if attributes.key?(:'dep_airport_longitude')
        self.dep_airport_longitude = attributes[:'dep_airport_longitude']
      end

      if attributes.key?(:'dep_airport_tz')
        self.dep_airport_tz = attributes[:'dep_airport_tz']
      end

      if attributes.key?(:'dep_airport_tz_diff_utc')
        self.dep_airport_tz_diff_utc = attributes[:'dep_airport_tz_diff_utc']
      end

      if attributes.key?(:'scheduled_departure')
        self.scheduled_departure = attributes[:'scheduled_departure']
      end

      if attributes.key?(:'estimated_departure')
        self.estimated_departure = attributes[:'estimated_departure']
      end

      if attributes.key?(:'actual_departure')
        self.actual_departure = attributes[:'actual_departure']
      end

      if attributes.key?(:'actual_takeoff')
        self.actual_takeoff = attributes[:'actual_takeoff']
      end

      if attributes.key?(:'calculated_takeoff')
        self.calculated_takeoff = attributes[:'calculated_takeoff']
      end

      if attributes.key?(:'div_airport_icao')
        self.div_airport_icao = attributes[:'div_airport_icao']
      end

      if attributes.key?(:'div_airport_iata')
        self.div_airport_iata = attributes[:'div_airport_iata']
      end

      if attributes.key?(:'div_airport_name')
        self.div_airport_name = attributes[:'div_airport_name']
      end

      if attributes.key?(:'div_airport_city')
        self.div_airport_city = attributes[:'div_airport_city']
      end

      if attributes.key?(:'div_airport_state')
        self.div_airport_state = attributes[:'div_airport_state']
      end

      if attributes.key?(:'div_airport_country')
        self.div_airport_country = attributes[:'div_airport_country']
      end

      if attributes.key?(:'div_airport_latitude')
        self.div_airport_latitude = attributes[:'div_airport_latitude']
      end

      if attributes.key?(:'div_airport_longitude')
        self.div_airport_longitude = attributes[:'div_airport_longitude']
      end

      if attributes.key?(:'div_airport_tz')
        self.div_airport_tz = attributes[:'div_airport_tz']
      end

      if attributes.key?(:'div_airport_tz_diff_utc')
        self.div_airport_tz_diff_utc = attributes[:'div_airport_tz_diff_utc']
      end

      if attributes.key?(:'arr_airport_icao')
        self.arr_airport_icao = attributes[:'arr_airport_icao']
      end

      if attributes.key?(:'arr_airport_iata')
        self.arr_airport_iata = attributes[:'arr_airport_iata']
      end

      if attributes.key?(:'arr_airport_name')
        self.arr_airport_name = attributes[:'arr_airport_name']
      end

      if attributes.key?(:'arr_airport_city')
        self.arr_airport_city = attributes[:'arr_airport_city']
      end

      if attributes.key?(:'arr_airport_state')
        self.arr_airport_state = attributes[:'arr_airport_state']
      end

      if attributes.key?(:'arr_airport_country')
        self.arr_airport_country = attributes[:'arr_airport_country']
      end

      if attributes.key?(:'arr_airport_latitude')
        self.arr_airport_latitude = attributes[:'arr_airport_latitude']
      end

      if attributes.key?(:'arr_airport_longitude')
        self.arr_airport_longitude = attributes[:'arr_airport_longitude']
      end

      if attributes.key?(:'arr_airport_tz')
        self.arr_airport_tz = attributes[:'arr_airport_tz']
      end

      if attributes.key?(:'arr_airport_tz_diff_utc')
        self.arr_airport_tz_diff_utc = attributes[:'arr_airport_tz_diff_utc']
      end

      if attributes.key?(:'scheduled_arrival')
        self.scheduled_arrival = attributes[:'scheduled_arrival']
      end

      if attributes.key?(:'estimated_arrival')
        self.estimated_arrival = attributes[:'estimated_arrival']
      end

      if attributes.key?(:'actual_arrival')
        self.actual_arrival = attributes[:'actual_arrival']
      end

      if attributes.key?(:'actual_landing')
        self.actual_landing = attributes[:'actual_landing']
      end

      if attributes.key?(:'calculated_landing')
        self.calculated_landing = attributes[:'calculated_landing']
      end

      if attributes.key?(:'departure_status')
        self.departure_status = attributes[:'departure_status']
      end

      if attributes.key?(:'departure_delay_reason')
        self.departure_delay_reason = attributes[:'departure_delay_reason']
      end

      if attributes.key?(:'departure_delay_detail')
        self.departure_delay_detail = attributes[:'departure_delay_detail']
      end

      if attributes.key?(:'departure_gate')
        self.departure_gate = attributes[:'departure_gate']
      end

      if attributes.key?(:'departure_terminal')
        self.departure_terminal = attributes[:'departure_terminal']
      end

      if attributes.key?(:'arrival_status')
        self.arrival_status = attributes[:'arrival_status']
      end

      if attributes.key?(:'arrival_delay_reason')
        self.arrival_delay_reason = attributes[:'arrival_delay_reason']
      end

      if attributes.key?(:'arrival_delay_detail')
        self.arrival_delay_detail = attributes[:'arrival_delay_detail']
      end

      if attributes.key?(:'arrival_gate')
        self.arrival_gate = attributes[:'arrival_gate']
      end

      if attributes.key?(:'arrival_terminal')
        self.arrival_terminal = attributes[:'arrival_terminal']
      end

      if attributes.key?(:'arrival_baggage_claim')
        self.arrival_baggage_claim = attributes[:'arrival_baggage_claim']
      end

      if attributes.key?(:'ground_speed')
        self.ground_speed = attributes[:'ground_speed']
      end

      if attributes.key?(:'heading')
        self.heading = attributes[:'heading']
      end

      if attributes.key?(:'altitude')
        self.altitude = attributes[:'altitude']
      end

      if attributes.key?(:'vertical_rate')
        self.vertical_rate = attributes[:'vertical_rate']
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.key?(:'squawk_code')
        self.squawk_code = attributes[:'squawk_code']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'positions')
        if (value = attributes[:'positions']).is_a?(Array)
          self.positions = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('Object', ['IN_FLIGHT', 'CANCELLED', 'SCHEDULED', 'LANDED', 'ON_GROUND', 'UNKNOWN'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Object', ['IN_FLIGHT', 'CANCELLED', 'SCHEDULED', 'LANDED', 'ON_GROUND', 'UNKNOWN'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          callsign == o.callsign &&
          flight_number_iata == o.flight_number_iata &&
          flight_number_icao == o.flight_number_icao &&
          aircraft_registration == o.aircraft_registration &&
          aircraft_mode_s == o.aircraft_mode_s &&
          aircraft_type == o.aircraft_type &&
          aircraft_classes == o.aircraft_classes &&
          aircraft_type_description == o.aircraft_type_description &&
          airline_iata == o.airline_iata &&
          airline_icao == o.airline_icao &&
          airline_name == o.airline_name &&
          dep_airport_icao == o.dep_airport_icao &&
          dep_airport_iata == o.dep_airport_iata &&
          dep_airport_name == o.dep_airport_name &&
          dep_airport_city == o.dep_airport_city &&
          dep_airport_state == o.dep_airport_state &&
          dep_airport_country == o.dep_airport_country &&
          dep_airport_latitude == o.dep_airport_latitude &&
          dep_airport_longitude == o.dep_airport_longitude &&
          dep_airport_tz == o.dep_airport_tz &&
          dep_airport_tz_diff_utc == o.dep_airport_tz_diff_utc &&
          scheduled_departure == o.scheduled_departure &&
          estimated_departure == o.estimated_departure &&
          actual_departure == o.actual_departure &&
          actual_takeoff == o.actual_takeoff &&
          calculated_takeoff == o.calculated_takeoff &&
          div_airport_icao == o.div_airport_icao &&
          div_airport_iata == o.div_airport_iata &&
          div_airport_name == o.div_airport_name &&
          div_airport_city == o.div_airport_city &&
          div_airport_state == o.div_airport_state &&
          div_airport_country == o.div_airport_country &&
          div_airport_latitude == o.div_airport_latitude &&
          div_airport_longitude == o.div_airport_longitude &&
          div_airport_tz == o.div_airport_tz &&
          div_airport_tz_diff_utc == o.div_airport_tz_diff_utc &&
          arr_airport_icao == o.arr_airport_icao &&
          arr_airport_iata == o.arr_airport_iata &&
          arr_airport_name == o.arr_airport_name &&
          arr_airport_city == o.arr_airport_city &&
          arr_airport_state == o.arr_airport_state &&
          arr_airport_country == o.arr_airport_country &&
          arr_airport_latitude == o.arr_airport_latitude &&
          arr_airport_longitude == o.arr_airport_longitude &&
          arr_airport_tz == o.arr_airport_tz &&
          arr_airport_tz_diff_utc == o.arr_airport_tz_diff_utc &&
          scheduled_arrival == o.scheduled_arrival &&
          estimated_arrival == o.estimated_arrival &&
          actual_arrival == o.actual_arrival &&
          actual_landing == o.actual_landing &&
          calculated_landing == o.calculated_landing &&
          departure_status == o.departure_status &&
          departure_delay_reason == o.departure_delay_reason &&
          departure_delay_detail == o.departure_delay_detail &&
          departure_gate == o.departure_gate &&
          departure_terminal == o.departure_terminal &&
          arrival_status == o.arrival_status &&
          arrival_delay_reason == o.arrival_delay_reason &&
          arrival_delay_detail == o.arrival_delay_detail &&
          arrival_gate == o.arrival_gate &&
          arrival_terminal == o.arrival_terminal &&
          arrival_baggage_claim == o.arrival_baggage_claim &&
          ground_speed == o.ground_speed &&
          heading == o.heading &&
          altitude == o.altitude &&
          vertical_rate == o.vertical_rate &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          squawk_code == o.squawk_code &&
          source == o.source &&
          created == o.created &&
          updated == o.updated &&
          positions == o.positions &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [callsign, flight_number_iata, flight_number_icao, aircraft_registration, aircraft_mode_s, aircraft_type, aircraft_classes, aircraft_type_description, airline_iata, airline_icao, airline_name, dep_airport_icao, dep_airport_iata, dep_airport_name, dep_airport_city, dep_airport_state, dep_airport_country, dep_airport_latitude, dep_airport_longitude, dep_airport_tz, dep_airport_tz_diff_utc, scheduled_departure, estimated_departure, actual_departure, actual_takeoff, calculated_takeoff, div_airport_icao, div_airport_iata, div_airport_name, div_airport_city, div_airport_state, div_airport_country, div_airport_latitude, div_airport_longitude, div_airport_tz, div_airport_tz_diff_utc, arr_airport_icao, arr_airport_iata, arr_airport_name, arr_airport_city, arr_airport_state, arr_airport_country, arr_airport_latitude, arr_airport_longitude, arr_airport_tz, arr_airport_tz_diff_utc, scheduled_arrival, estimated_arrival, actual_arrival, actual_landing, calculated_landing, departure_status, departure_delay_reason, departure_delay_detail, departure_gate, departure_terminal, arrival_status, arrival_delay_reason, arrival_delay_detail, arrival_gate, arrival_terminal, arrival_baggage_claim, ground_speed, heading, altitude, vertical_rate, latitude, longitude, squawk_code, source, created, updated, positions, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Radarbox.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
