=begin
#RadarBox On Demand API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.30-SNAPSHOT

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module Radarbox
  # METARs provide a report of the current weather conditions in the vicinity of an aerodrome
  class ApiMetar
    attr_accessor :observation_time

    attr_accessor :coordinates

    attr_accessor :temperature

    attr_accessor :dew_point

    attr_accessor :wind_direction

    attr_accessor :wind_speed

    attr_accessor :visibility

    attr_accessor :altimeter

    attr_accessor :auto

    attr_accessor :wx

    attr_accessor :sky_cover

    attr_accessor :cloud_base

    attr_accessor :flight_category

    attr_accessor :metar_type

    attr_accessor :elevation

    attr_accessor :raw_text

    attr_accessor :observation_hour

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'observation_time' => :'observationTime',
        :'coordinates' => :'coordinates',
        :'temperature' => :'temperature',
        :'dew_point' => :'dewPoint',
        :'wind_direction' => :'windDirection',
        :'wind_speed' => :'windSpeed',
        :'visibility' => :'visibility',
        :'altimeter' => :'altimeter',
        :'auto' => :'auto',
        :'wx' => :'wx',
        :'sky_cover' => :'skyCover',
        :'cloud_base' => :'cloudBase',
        :'flight_category' => :'flightCategory',
        :'metar_type' => :'metarType',
        :'elevation' => :'elevation',
        :'raw_text' => :'rawText',
        :'observation_hour' => :'observationHour'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'observation_time' => :'Object',
        :'coordinates' => :'Object',
        :'temperature' => :'Object',
        :'dew_point' => :'Object',
        :'wind_direction' => :'Object',
        :'wind_speed' => :'Object',
        :'visibility' => :'Object',
        :'altimeter' => :'Object',
        :'auto' => :'Object',
        :'wx' => :'Object',
        :'sky_cover' => :'Object',
        :'cloud_base' => :'Object',
        :'flight_category' => :'Object',
        :'metar_type' => :'Object',
        :'elevation' => :'Object',
        :'raw_text' => :'Object',
        :'observation_hour' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Radarbox::ApiMetar` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Radarbox::ApiMetar`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'observation_time')
        self.observation_time = attributes[:'observation_time']
      end

      if attributes.key?(:'coordinates')
        self.coordinates = attributes[:'coordinates']
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      end

      if attributes.key?(:'dew_point')
        self.dew_point = attributes[:'dew_point']
      end

      if attributes.key?(:'wind_direction')
        self.wind_direction = attributes[:'wind_direction']
      end

      if attributes.key?(:'wind_speed')
        self.wind_speed = attributes[:'wind_speed']
      end

      if attributes.key?(:'visibility')
        self.visibility = attributes[:'visibility']
      end

      if attributes.key?(:'altimeter')
        self.altimeter = attributes[:'altimeter']
      end

      if attributes.key?(:'auto')
        self.auto = attributes[:'auto']
      end

      if attributes.key?(:'wx')
        self.wx = attributes[:'wx']
      end

      if attributes.key?(:'sky_cover')
        self.sky_cover = attributes[:'sky_cover']
      end

      if attributes.key?(:'cloud_base')
        self.cloud_base = attributes[:'cloud_base']
      end

      if attributes.key?(:'flight_category')
        self.flight_category = attributes[:'flight_category']
      end

      if attributes.key?(:'metar_type')
        self.metar_type = attributes[:'metar_type']
      end

      if attributes.key?(:'elevation')
        self.elevation = attributes[:'elevation']
      end

      if attributes.key?(:'raw_text')
        self.raw_text = attributes[:'raw_text']
      end

      if attributes.key?(:'observation_hour')
        self.observation_hour = attributes[:'observation_hour']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          observation_time == o.observation_time &&
          coordinates == o.coordinates &&
          temperature == o.temperature &&
          dew_point == o.dew_point &&
          wind_direction == o.wind_direction &&
          wind_speed == o.wind_speed &&
          visibility == o.visibility &&
          altimeter == o.altimeter &&
          auto == o.auto &&
          wx == o.wx &&
          sky_cover == o.sky_cover &&
          cloud_base == o.cloud_base &&
          flight_category == o.flight_category &&
          metar_type == o.metar_type &&
          elevation == o.elevation &&
          raw_text == o.raw_text &&
          observation_hour == o.observation_hour
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [observation_time, coordinates, temperature, dew_point, wind_direction, wind_speed, visibility, altimeter, auto, wx, sky_cover, cloud_base, flight_category, metar_type, elevation, raw_text, observation_hour].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Radarbox.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
