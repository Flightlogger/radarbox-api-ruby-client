=begin
#RadarBox On Demand API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.1.14

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module Radarbox
  class AirportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Airport by code
    # Use this endpoint if you know exactly which airport you need to know details for - you can search by ICAO or IATA code.
    # @param icao_code ICAO code
    # @param [Hash] opts the optional parameters
    # @return [GetAirportResponse]
    def get_airport(icao_code, opts = {})
      data, _status_code, _headers = get_airport_with_http_info(icao_code, opts)
      data
    end

    # Airport by code
    # Use this endpoint if you know exactly which airport you need to know details for - you can search by ICAO or IATA code.
    # @param icao_code ICAO code
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAirportResponse, Integer, Hash)>] GetAirportResponse data, response status code and response headers
    def get_airport_with_http_info(icao_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AirportsApi.get_airport ...'
      end
      # verify the required parameter 'icao_code' is set
      if @api_client.config.client_side_validation && icao_code.nil?
        fail ArgumentError, "Missing the required parameter 'icao_code' when calling AirportsApi.get_airport"
      end
      # resource path
      local_var_path = '/airports/{icaoCode}'.sub('{' + 'icaoCode' + '}', icao_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetAirportResponse' 

      auth_names = opts[:auth_names] || ['bearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AirportsApi#get_airport\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get D-ATIS by airport
    # ATIS (Automatic Terminal Information Service) is a service that continuously broadcasts aeronautical information around the airport. D-ATIS is the text transcription of the information provided by it. Use this endpoint to find the latest information for a specific airport.
    # @param icao_code ICAO code
    # @param [Hash] opts the optional parameters
    # @return [GetDatisResponse]
    def get_datis(icao_code, opts = {})
      data, _status_code, _headers = get_datis_with_http_info(icao_code, opts)
      data
    end

    # Get D-ATIS by airport
    # ATIS (Automatic Terminal Information Service) is a service that continuously broadcasts aeronautical information around the airport. D-ATIS is the text transcription of the information provided by it. Use this endpoint to find the latest information for a specific airport.
    # @param icao_code ICAO code
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDatisResponse, Integer, Hash)>] GetDatisResponse data, response status code and response headers
    def get_datis_with_http_info(icao_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AirportsApi.get_datis ...'
      end
      # verify the required parameter 'icao_code' is set
      if @api_client.config.client_side_validation && icao_code.nil?
        fail ArgumentError, "Missing the required parameter 'icao_code' when calling AirportsApi.get_datis"
      end
      # resource path
      local_var_path = '/airports/{icaoCode}/datis'.sub('{' + 'icaoCode' + '}', icao_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetDatisResponse' 

      auth_names = opts[:auth_names] || ['bearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AirportsApi#get_datis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get METAR by airport
    # METARs (METeorological Aerodrome Reports) provide a report of the current weather conditions in the vicinity of an aerodrome. Use this endpoint to get the most up-to-date METAR information.
    # @param icao_code ICAO code
    # @param [Hash] opts the optional parameters
    # @return [GetMetarResponse]
    def get_metar(icao_code, opts = {})
      data, _status_code, _headers = get_metar_with_http_info(icao_code, opts)
      data
    end

    # Get METAR by airport
    # METARs (METeorological Aerodrome Reports) provide a report of the current weather conditions in the vicinity of an aerodrome. Use this endpoint to get the most up-to-date METAR information.
    # @param icao_code ICAO code
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMetarResponse, Integer, Hash)>] GetMetarResponse data, response status code and response headers
    def get_metar_with_http_info(icao_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AirportsApi.get_metar ...'
      end
      # verify the required parameter 'icao_code' is set
      if @api_client.config.client_side_validation && icao_code.nil?
        fail ArgumentError, "Missing the required parameter 'icao_code' when calling AirportsApi.get_metar"
      end
      # resource path
      local_var_path = '/airports/{icaoCode}/metar'.sub('{' + 'icaoCode' + '}', icao_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetMetarResponse' 

      auth_names = opts[:auth_names] || ['bearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AirportsApi#get_metar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get TAF by airport
    # TAF (Terminal Aerodrome Forecast) is a weather forecast information service provided by airports to serve the surrounding air traffic. TAF reports are updated several times throughout the day to ensure that pilots have access to the most up-to-date information as possible. You can use this endpoint to get the latest weather information for a specific airport.
    # @param icao_code ICAO code
    # @param [Hash] opts the optional parameters
    # @return [GetTafResponse]
    def get_taf(icao_code, opts = {})
      data, _status_code, _headers = get_taf_with_http_info(icao_code, opts)
      data
    end

    # Get TAF by airport
    # TAF (Terminal Aerodrome Forecast) is a weather forecast information service provided by airports to serve the surrounding air traffic. TAF reports are updated several times throughout the day to ensure that pilots have access to the most up-to-date information as possible. You can use this endpoint to get the latest weather information for a specific airport.
    # @param icao_code ICAO code
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTafResponse, Integer, Hash)>] GetTafResponse data, response status code and response headers
    def get_taf_with_http_info(icao_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AirportsApi.get_taf ...'
      end
      # verify the required parameter 'icao_code' is set
      if @api_client.config.client_side_validation && icao_code.nil?
        fail ArgumentError, "Missing the required parameter 'icao_code' when calling AirportsApi.get_taf"
      end
      # resource path
      local_var_path = '/airports/{icaoCode}/taf'.sub('{' + 'icaoCode' + '}', icao_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetTafResponse' 

      auth_names = opts[:auth_names] || ['bearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AirportsApi#get_taf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Airport search
    # Use this endpoint if you are trying to find all airports in a country, city or within a specific region.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code Country code (2 letters)
    # @option opts [String] :country_name Country name
    # @option opts [String] :icao_code Airport ICAO code
    # @option opts [BOOLEAN] :only_major Only major airports
    # @option opts [String] :city City
    # @option opts [Float] :latitude1 Latitude 1
    # @option opts [Float] :longitude1 Longitude 1
    # @option opts [Float] :latitude2 Latitude 2
    # @option opts [Float] :longitude2 Longitude 2
    # @return [GetAirportsResponse]
    def search_airport(opts = {})
      data, _status_code, _headers = search_airport_with_http_info(opts)
      data
    end

    # Airport search
    # Use this endpoint if you are trying to find all airports in a country, city or within a specific region.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code Country code (2 letters)
    # @option opts [String] :country_name Country name
    # @option opts [String] :icao_code Airport ICAO code
    # @option opts [BOOLEAN] :only_major Only major airports
    # @option opts [String] :city City
    # @option opts [Float] :latitude1 Latitude 1
    # @option opts [Float] :longitude1 Longitude 1
    # @option opts [Float] :latitude2 Latitude 2
    # @option opts [Float] :longitude2 Longitude 2
    # @return [Array<(GetAirportsResponse, Integer, Hash)>] GetAirportsResponse data, response status code and response headers
    def search_airport_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AirportsApi.search_airport ...'
      end
      # resource path
      local_var_path = '/airports/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'countryCode'] = opts[:'country_code'] if !opts[:'country_code'].nil?
      query_params[:'countryName'] = opts[:'country_name'] if !opts[:'country_name'].nil?
      query_params[:'icaoCode'] = opts[:'icao_code'] if !opts[:'icao_code'].nil?
      query_params[:'onlyMajor'] = opts[:'only_major'] if !opts[:'only_major'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'latitude1'] = opts[:'latitude1'] if !opts[:'latitude1'].nil?
      query_params[:'longitude1'] = opts[:'longitude1'] if !opts[:'longitude1'].nil?
      query_params[:'latitude2'] = opts[:'latitude2'] if !opts[:'latitude2'].nil?
      query_params[:'longitude2'] = opts[:'longitude2'] if !opts[:'longitude2'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetAirportsResponse' 

      auth_names = opts[:auth_names] || ['bearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AirportsApi#search_airport\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
